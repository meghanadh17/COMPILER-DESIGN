Develop a lexical Analyzer to test whether a given identifier is valid or not using C.

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_IDENTIFIER_LENGTH 100

// Function to check if the identifier is valid
int isValidIdentifier(const char *identifier) {
    // Check if the identifier is empty or exceeds the maximum length
    if (strlen(identifier) == 0 || strlen(identifier) > MAX_IDENTIFIER_LENGTH) {
        return 0; // Invalid
    }

    // Check the first character
    if (!isalpha(identifier[0]) && identifier[0] != '_') {
        return 0; // Invalid
    }

    // Check the rest of the characters
    for (int i = 1; i < strlen(identifier); i++) {
        if (!isalnum(identifier[i]) && identifier[i] != '_') {
            return 0; // Invalid
        }
    }

    // List of reserved keywords (for simplicity, we can add more)
    const char *keywords[] = {
        "int", "return", "if", "else", "while", "for", "break", "continue", "void", "char", "float", "double", "struct", "typedef", "static", "const", "enum", "goto", "switch", "case", "default", "sizeof", "volatile", "extern", "register", "union", "do", "break", "goto", "asm", "inline", "restrict", "sizeof", "typedef", "volatile", "const"
    };
    int numKeywords = sizeof(keywords) / sizeof(keywords[0]);

    // Check against reserved keywords
    for (int i = 0; i < numKeywords; i++) {
        if (strcmp(identifier, keywords[i]) == 0) {
            return 0; // Invalid because it's a keyword
        }
    }

    return 1; // Valid identifier
}

int main() {
    char identifier[MAX_IDENTIFIER_LENGTH];

    printf("Enter an identifier: ");
    scanf("%s", identifier);

    if (isValidIdentifier(identifier)) {
        printf("'%s' is a valid identifier.\n", identifier);
    } else {
        printf("'%s' is not a valid identifier.\n", identifier);
    }

    return 0;
}

OUTPUT:
Enter an identifier: a
'a' is a valid identifier.
